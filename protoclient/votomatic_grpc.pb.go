// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: votomatic.proto

package protoclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VoteService_GetVoteStatus_FullMethodName    = "/VoteService/GetVoteStatus"
	VoteService_GetVoteUpdates_FullMethodName   = "/VoteService/GetVoteUpdates"
	VoteService_GetConfiguration_FullMethodName = "/VoteService/GetConfiguration"
	VoteService_PushVote_FullMethodName         = "/VoteService/PushVote"
)

// VoteServiceClient is the client API for VoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteServiceClient interface {
	GetVoteStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*VoteStatus, error)
	GetVoteUpdates(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (VoteService_GetVoteUpdatesClient, error)
	GetConfiguration(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error)
	PushVote(ctx context.Context, in *PushVoteRequest, opts ...grpc.CallOption) (*EmptyRequest, error)
}

type voteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteServiceClient(cc grpc.ClientConnInterface) VoteServiceClient {
	return &voteServiceClient{cc}
}

func (c *voteServiceClient) GetVoteStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*VoteStatus, error) {
	out := new(VoteStatus)
	err := c.cc.Invoke(ctx, VoteService_GetVoteStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) GetVoteUpdates(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (VoteService_GetVoteUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &VoteService_ServiceDesc.Streams[0], VoteService_GetVoteUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &voteServiceGetVoteUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VoteService_GetVoteUpdatesClient interface {
	Recv() (*VoteUpdate, error)
	grpc.ClientStream
}

type voteServiceGetVoteUpdatesClient struct {
	grpc.ClientStream
}

func (x *voteServiceGetVoteUpdatesClient) Recv() (*VoteUpdate, error) {
	m := new(VoteUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *voteServiceClient) GetConfiguration(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error) {
	out := new(ConfigurationResponse)
	err := c.cc.Invoke(ctx, VoteService_GetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteServiceClient) PushVote(ctx context.Context, in *PushVoteRequest, opts ...grpc.CallOption) (*EmptyRequest, error) {
	out := new(EmptyRequest)
	err := c.cc.Invoke(ctx, VoteService_PushVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteServiceServer is the server API for VoteService service.
// All implementations must embed UnimplementedVoteServiceServer
// for forward compatibility
type VoteServiceServer interface {
	GetVoteStatus(context.Context, *EmptyRequest) (*VoteStatus, error)
	GetVoteUpdates(*EmptyRequest, VoteService_GetVoteUpdatesServer) error
	GetConfiguration(context.Context, *EmptyRequest) (*ConfigurationResponse, error)
	PushVote(context.Context, *PushVoteRequest) (*EmptyRequest, error)
	mustEmbedUnimplementedVoteServiceServer()
}

// UnimplementedVoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoteServiceServer struct {
}

func (UnimplementedVoteServiceServer) GetVoteStatus(context.Context, *EmptyRequest) (*VoteStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoteStatus not implemented")
}
func (UnimplementedVoteServiceServer) GetVoteUpdates(*EmptyRequest, VoteService_GetVoteUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVoteUpdates not implemented")
}
func (UnimplementedVoteServiceServer) GetConfiguration(context.Context, *EmptyRequest) (*ConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedVoteServiceServer) PushVote(context.Context, *PushVoteRequest) (*EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushVote not implemented")
}
func (UnimplementedVoteServiceServer) mustEmbedUnimplementedVoteServiceServer() {}

// UnsafeVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteServiceServer will
// result in compilation errors.
type UnsafeVoteServiceServer interface {
	mustEmbedUnimplementedVoteServiceServer()
}

func RegisterVoteServiceServer(s grpc.ServiceRegistrar, srv VoteServiceServer) {
	s.RegisterService(&VoteService_ServiceDesc, srv)
}

func _VoteService_GetVoteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).GetVoteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoteService_GetVoteStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).GetVoteStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_GetVoteUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VoteServiceServer).GetVoteUpdates(m, &voteServiceGetVoteUpdatesServer{stream})
}

type VoteService_GetVoteUpdatesServer interface {
	Send(*VoteUpdate) error
	grpc.ServerStream
}

type voteServiceGetVoteUpdatesServer struct {
	grpc.ServerStream
}

func (x *voteServiceGetVoteUpdatesServer) Send(m *VoteUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _VoteService_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoteService_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).GetConfiguration(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoteService_PushVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServiceServer).PushVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoteService_PushVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServiceServer).PushVote(ctx, req.(*PushVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoteService_ServiceDesc is the grpc.ServiceDesc for VoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VoteService",
	HandlerType: (*VoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVoteStatus",
			Handler:    _VoteService_GetVoteStatus_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _VoteService_GetConfiguration_Handler,
		},
		{
			MethodName: "PushVote",
			Handler:    _VoteService_PushVote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVoteUpdates",
			Handler:       _VoteService_GetVoteUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "votomatic.proto",
}
